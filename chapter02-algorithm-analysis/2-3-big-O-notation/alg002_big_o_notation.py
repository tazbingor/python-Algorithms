#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Time    : 18/1/20 下午8:36
# @Author  : Aries
# @Site    : 
# @File    : alg002_big_o_notation.py
# @Software: PyCharm
'''
大O表示法

如何理解“大O记法”
对于算法进行特别具体的细致分析虽然很好，但在实践中的实际价值有限。对于算法的时间性质和空间性质，最重要的是其数量级和趋势，这些是分析算法效率的主要部分。而计量算法基本操作数量的规模函数中那些常量因子可以忽略不计。例如，可以认为3n2和100n2属于同一个量级，如果两个算法处理同样规模实例的代价分别为这两个函数，就认为它们的效率“差不多”，都为n2级。

最坏时间复杂度
分析算法时，存在几种可能的考虑：

算法完成工作最少需要多少基本操作，即最优时间复杂度
算法完成工作最多需要多少基本操作，即最坏时间复杂度
算法完成工作平均需要多少基本操作，即平均时间复杂度
对于最优时间复杂度，其价值不大，因为它没有提供什么有用信息，其反映的只是最乐观最理想的情况，没有参考价值。

对于最坏时间复杂度，提供了一种保证，表明算法在此种程度的基本操作中一定能完成工作。
对于平均时间复杂度，是对算法的一个全面评价，因此它完整全面的反映了这个算法的性质。
但另一方面，这种衡量并没有保证，不是每个计算都能在这个基本操作内完成。
而且，对于平均情况的计算，也会因为应用算法的实例分布可能并不均匀而难以计算。
因此，我们主要关注算法的最坏情况，亦即最坏时间复杂度。
'''
fbbs = []
for fbb in range(1, 999):
    fbbs.append(fbb)

print(fbbs)
zx = min(fbbs)
zd = max(fbbs)
print(zx, '-', zd)
